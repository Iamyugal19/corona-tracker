{"version":3,"sources":["Components/Cards/card.module.css","Components/Cards/Card.jsx","Components/Cards/Cards.jsx","API/index.js","Components/Chart/Chart.jsx","Components/CountryPicer/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","Components/Cards/Cards.module.css","Components/Chart/Chart.module.css","Components/CountryPicer/CountryPicker.module.css","images/image.png"],"names":["module","exports","card","props","classes","title","styles","Infected","Recovered","Deaths","Grid","item","component","Card","xs","md","className","cx","CardContent","Typography","color","gutterBottom","variant","start","end","confirmed","value","duration","separator","Date","lastUpdate","toDateString","Cards","data","recovered","deaths","container","spacing","justify","style","url","fetchData","country","a","changableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailydata","total","date","reportDate","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","red","barchart","options","legend","display","text","CountryPicker","countryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","App","state","handleCountryChange","fetchedData","setState","this","image","src","coronaImage","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d0db45e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__16oEZ\",\"Infected\":\"card_Infected__2XPuC\",\"Recovered\":\"card_Recovered__1ESK-\",\"Deaths\":\"card_Deaths__RZCHh\"};","import React from 'react';\r\nimport {Card, CardContent, Typography,Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './card.module.css';\r\nimport cx from 'classnames';\r\nconst card = (props) => {\r\n     let classes = props.title;\r\n    switch(classes){\r\n        case('Infected'):\r\n            classes = styles.Infected;\r\n            break;\r\n        case('Recovered'):\r\n            classes = styles.Recovered;\r\n            break;\r\n        case('Deaths'):\r\n            classes = styles.Deaths\r\n            break;\r\n\r\n    }\r\n        return(\r\n        <Grid item component = {Card}  xs = {12} md = {3} className ={cx(styles.card,classes)}>\r\n            <CardContent>\r\n                <Typography color = 'textSecondary' gutterBottom>{props.title}</Typography>\r\n                <Typography variant = 'h5' >\r\n                    <CountUp start = {0} end = {props.confirmed.value} duration = {2.5} separator = ',' />\r\n                    </Typography>\r\n                <Typography color = 'textSecondary'>{new Date(props.lastUpdate).toDateString()}</Typography>\r\n                <Typography variant = 'body2' >No of {props.title} Case</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport styles from './Cards.module.css';\r\nimport style from './card.module.css';\r\nimport Card from './Card';\r\nimport {Grid} from '@material-ui/core';\r\n\r\nconst Cards = ({data: {confirmed,recovered,deaths,lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'Loading....';\r\n    }\r\n    return(\r\n        <div className = {styles.container}>\r\n        <Grid container spacing = {3} justify = 'center'>\r\n            <Card confirmed = {confirmed} lastUpdate = {lastUpdate} title = 'Infected' className = {style.Infected}/>\r\n            <Card confirmed = {recovered} lastUpdate = {lastUpdate} title = \"Recovered\"  />\r\n            <Card confirmed = {deaths} lastUpdate = {lastUpdate} title = 'Deaths'  /> \r\n        </Grid>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nexport const fetchData = async (country) => {\r\n    let changableUrl = url;\r\n    if(country)\r\n        changableUrl = `${url}/countries/${country}`\r\n\r\n    try{\r\n        const {data: {confirmed, recovered, deaths,lastUpdate}} = await axios.get(changableUrl);\r\n         \r\n        return {confirmed,recovered,deaths,lastUpdate};\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailydata) => ({\r\n            confirmed: dailydata.confirmed.total,\r\n            deaths: dailydata.deaths.total,\r\n            date: dailydata.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${url}/countries`)\r\n        return countries.map((country) => country.name );\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}","import React, {useEffect,useState} from 'react';\r\nimport {fetchDailyData} from '../../API';\r\nimport {Bar,Line} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nconst Chart = ({data: {confirmed,recovered,deaths},country}) => {\r\n    const [dailyData,setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n\r\n        dailyData.length ? (<Line \r\n        data = {{\r\n            labels: dailyData.map(({date}) => date),\r\n            datasets: [{\r\n                data: dailyData.map(({confirmed}) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true\r\n\r\n            },{ data: dailyData.map(({deaths}) => deaths),\r\n                label: 'Deaths',\r\n                backgroundColor: 'rgba(250,0,0,0.5)',\r\n                fill: true,\r\n                borderColor: red\r\n\r\n            }]\r\n        }} />) : null\r\n    );\r\n\r\n    const barchart = (\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n            data = {{\r\n                labels: ['Infected', 'Recovered','Deaths'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                        'rgba(0, 0, 255, 0.5)',\r\n                        'rgba(0,255,0, 0.5)',\r\n                        'rgba(255, 0, 0, 0.5)'\r\n                    ],\r\n                    data: [confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n            }}\r\n            options = {{\r\n                legend: {display: false},\r\n                title: {display: true,text: `Current state in ${country}`}\r\n            }}\r\n\r\n            />) : null\r\n    )\r\n\r\n    return(\r\n        <div className = {styles.container}>\r\n           { country ? barchart : lineChart}  \r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Chart;","import React, {useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../API';\r\n\r\nconst CountryPicker = ({countryChange}) => {\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI =  async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n     },[setFetchedCountries]);\r\n    return(\r\n   <FormControl className = {styles.formControl}>\r\n       <NativeSelect default = '' onChange = {(e) => countryChange(e.target.value)}>\r\n        <option value = ''>Global</option>\r\n        {fetchedCountries.map((country,i) => <option key = {i} value = {country}>{country}</option>)}\r\n       </NativeSelect>\r\n   </FormControl>\r\n    );\r\n\r\n}\r\nexport default CountryPicker;","import React, { Component } from 'react';\nimport {Cards, Chart, CountryPicker} from './Components';\nimport styles from './App.module.css';\nimport { fetchData } from './API';\nimport coronaImage from './images/image.png';\n\nclass App extends Component {\n\nstate = {\n  data: {},\n  country: '',\n}\nasync componentDidMount() {\n  const fetchedData = await fetchData();\n  this.setState({data: fetchedData});\n}\n\nhandleCountryChange = async (country) => {\n  const fetchedData = await fetchData(country);\n  this.setState({data: fetchedData, country: country});\n}\n\n\n\n\n\n  render(){\n    const { data,country} = this.state;\n    return (\n      <div className={styles.container}>\n      <img className = {styles.image} src = {coronaImage} alt = 'COVID-19' />\n        <Cards data = {data} />\n        <CountryPicker countryChange = {this.handleCountryChange}/>\n        <Chart data = {data}  country = {country}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1rA9L\",\"image\":\"App_image__iphKx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__C_JYD\",\"card\":\"Cards_card__2bq-b\",\"Infected\":\"Cards_Infected__12AIV\",\"Recovered\":\"Cards_Recovered__2HMct\",\"Deaths\":\"Cards_Deaths__tLS6G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1GMOd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1uZ6P\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}